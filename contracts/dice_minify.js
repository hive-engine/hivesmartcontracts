const HIVE_PEGGED_SYMBOL="SWAP.HIVE",CONTRACT_NAME="dice";actions.createSSC=async()=>{await api.db.createTable("params");const params={houseEdge:"0.01",minBet:"0.1",maxBet:"100"};await api.db.insert("params",params)},actions.roll=async payload=>{const{roll:roll,amount:amount}=payload;if(api.assert(roll&&Number.isInteger(roll)&&roll>=2&&roll<=96,"roll must be an integer and must be between 2 and 96")&&api.assert(amount&&"string"==typeof amount&&api.BigNumber(amount).dp()<=3&&api.BigNumber(amount).gt(0),"invalid amount")){const params=await api.db.findOne("params",{});if(api.assert(api.BigNumber(amount).gte(params.minBet)&&api.BigNumber(amount).lte(params.maxBet),"amount must be between minBet and maxBet")){const res=await api.executeSmartContract("tokens","transferToContract",{symbol:"SWAP.HIVE",quantity:amount,to:"dice"});if(void 0===res.errors&&res.events&&void 0!==res.events.find(el=>"tokens"===el.contract&&"transferToContract"===el.event&&el.data.from===api.sender&&"dice"===el.data.to&&api.BigNumber(el.data.quantity).eq(amount)&&"SWAP.HIVE"===el.data.symbol)){const random=api.random(),randomRoll=Math.floor(100*random)+1;if(randomRoll<roll){const multiplier=api.BigNumber(1).minus(params.houseEdge).multipliedBy(100).dividedBy(roll),tokensWon=api.BigNumber(amount).multipliedBy(multiplier).toFixed(3,api.BigNumber.ROUND_DOWN);await api.transferTokens(api.sender,"SWAP.HIVE",tokensWon,"user"),api.emit("results",{memo:`you won. roll: ${randomRoll}, your bet: ${roll}`})}else api.emit("results",{memo:`you lost. roll: ${randomRoll}, your bet: ${roll}`})}}}};