const initiateWithdrawal=async(id,recipient,quantity,memo)=>{const withdrawal={};withdrawal.id=id,withdrawal.type="HIVE",withdrawal.recipient=recipient,withdrawal.memo=memo,withdrawal.quantity=quantity,await api.db.insert("withdrawals",withdrawal)};actions.createSSC=async()=>{!1===await api.db.tableExists("withdrawals")&&await api.db.createTable("withdrawals")},actions.buy=async payload=>{const{recipient:recipient,amountHIVEHBD:amountHIVEHBD,isSignedWithActiveKey:isSignedWithActiveKey}=payload;if(recipient===api.owner&&recipient&&amountHIVEHBD&&isSignedWithActiveKey){const res=amountHIVEHBD.split(" "),unit=res[1];if(api.assert("HIVE"===unit,"only HIVE can be used")){let quantityToSend=res[0],fee=api.BigNumber(quantityToSend).multipliedBy("0.0075").toFixed(3);if(api.BigNumber(fee).lt("0.001")&&(fee="0.001"),quantityToSend=api.BigNumber(quantityToSend).minus(fee).toFixed(3),api.BigNumber(quantityToSend).gt(0)&&await api.executeSmartContractAsOwner("tokens","transfer",{symbol:"SWAP.HIVE",quantity:quantityToSend,to:api.sender}),api.BigNumber(fee).gt(0)){const memo=`fee tx ${api.transactionId}`;await initiateWithdrawal(`${api.transactionId}-fee`,"'${CONSTANTS.ACCOUNT_RECEIVING_FEES}$'",fee,memo)}}}},actions.withdraw=async payload=>{const{quantity:quantity,isSignedWithActiveKey:isSignedWithActiveKey}=payload;if(api.assert(quantity&&"string"==typeof quantity&&!api.BigNumber(quantity).isNaN()&&isSignedWithActiveKey&&api.BigNumber(quantity).dp()<=3,"invalid params")&&api.assert(api.BigNumber(quantity).gte(.002),"minimum withdrawal is 0.002")){let fee=api.BigNumber(quantity).multipliedBy("0.0075").toFixed(3);api.BigNumber(fee).lt("0.001")&&(fee="0.001");const quantityToSend=api.BigNumber(quantity).minus(fee).toFixed(3);if(api.BigNumber(quantityToSend).gt(0)){const res=await api.executeSmartContract("tokens","transfer",{symbol:"SWAP.HIVE",quantity:quantity,to:api.owner});if(void 0===res.errors&&res.events&&void 0!==res.events.find(el=>"tokens"===el.contract&&"transfer"===el.event&&el.data.from===api.sender&&el.data.to===api.owner&&api.BigNumber(el.data.quantity).eq(quantity)&&"SWAP.HIVE"===el.data.symbol)){let memo=`withdrawal tx ${api.transactionId}`;await initiateWithdrawal(api.transactionId,api.sender,quantityToSend,memo),api.BigNumber(fee).gt(0)&&(memo=`fee tx ${api.transactionId}`,await initiateWithdrawal(`${api.transactionId}-fee`,"'${CONSTANTS.ACCOUNT_RECEIVING_FEES}$'",fee,memo))}}}},actions.removeWithdrawal=async payload=>{const{id:id,isSignedWithActiveKey:isSignedWithActiveKey}=payload;if(api.sender===api.owner&&id&&isSignedWithActiveKey){const withdrawal=await api.db.findOne("withdrawals",{id:id});withdrawal&&await api.db.remove("withdrawals",withdrawal)}};